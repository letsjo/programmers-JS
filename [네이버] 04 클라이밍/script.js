// 문제 설명
// 스포츠 클라이밍은 암벽에 설치된 손잡이(홀드)를 잡고 이동하는 스포츠입니다. 암벽의 각 홀드까지 가기 위해 최소 몇 개의 홀드를 지나야 하는지 알아보려 합니다.

// 암벽은 직사각형 격자 형태입니다. 각 칸은 "홀드", "빈칸", "막힌 칸" 중 하나며, 각각 H, ., X로 표현합니다. 맨 아래 행의 첫 번째 열은 항상 홀드이고 시작 위치입니다. 현재 홀드로부터 이동할 수 있는 홀드는 다음과 같습니다.

// 주변 지형과 관계없이 상하좌우로 인접한 홀드로 갈 수 있습니다.
// 좌우로 2칸 또는 3칸 떨어진 홀드로 가기 위해서는, 아래 세 가지 종류의 칸들이 모두 빈칸이어야 합니다.
// 두 홀드의 바로 위쪽 칸들
// 두 홀드가 위치한 칸을 직선으로 이었을 때 지나는 칸들
// 두 홀드가 위치한 칸을 직선으로 이었을 때 지나는 칸들의 바로 위쪽 칸들
// 바로 위쪽 칸이 빈칸인 경우 위쪽으로 2칸 떨어진 홀드로 이동할 수 있습니다.
// 왼쪽 위에 위치한 홀드로 가기 위해서는 바로 왼쪽 칸과 바로 위 칸이 빈칸이어야 합니다.
// 오른쪽 위에 위치한 홀드로 가기 위해서는 바로 오른쪽 칸과 바로 위 칸이 빈칸이어야 합니다.
// 이외의 방법으로는 이동할 수 없습니다.
// pic1.png

// 위 그림은 A홀드에서 B홀드로 넘어가는 방법들을 나타내고, 초록색 칸은 빈칸이어야 하는 칸을 의미합니다. 만약 초록색 칸 중 하나라도 막힌 칸이나 홀드라면 넘어갈 수 없습니다.

// 암벽의 범위를 벗어난 칸은 막힌 칸으로 간주합니다.

// 암벽의 형태를 나타내는 1차원 문자열 배열 wall 이 매개변수로 주어집니다. 시작 위치에서 출발하여 각 칸의 홀드까지 가기 위해 거쳐야 하는 최소 홀드 개수를 2차원 정수 배열에 담아 return 하도록 solution 함수를 완성해주세요. 거쳐야 하는 홀드의 개수는 시작점과 끝점을 포함하며, 도달할 수 없는 위치의 홀드는 -1을, 빈칸 또는 막힌 칸은 0을 배열에 담아 return 해주세요.

// 제한사항
// 1 ≤ wall 의 길이 ≤ 500
// 1 ≤ wall 의 원소의 길이 ≤ 500
// 모든 wall 의 원소의 길이는 동일합니다.
// wall[i][j] 는 암벽의 i+1 행 j+1 열의 정보를 담고 있습니다.
// wall 의 원소는 H, ., X 로만 이루어진 문자열입니다.
// H 는 홀드, . 는 빈칸, X 는 막힌 칸을 의미합니다.
// wall 의 마지막 원소의 첫 글자는 H 입니다.
// 입출력 예
// wall	result
// ["H.H",".HX","H.H"]	[[2,0,-1],[0,2,0],[1,0,-1]]
// ["....HH","H..H.H"]	[[0,0,0,0,3,4],[1,0,0,2,0,5]]
// 입출력 예 설명
// 입출력 예 #1

// 다음 그림은 암벽에서 이동할 수 있는 모든 방법을 표시한 것입니다.

// pic2.png

// (2, 0) 홀드는 출발 위치이므로 1개의 홀드를 거치면 갈 수 있습니다.
// (0, 0) 홀드와 (1, 1) 홀드는 2개의 홀드를 거치면 갈 수 있습니다.
// (0, 0) 홀드까지 갈 때 (2, 0), (1, 1), (0, 0) 홀드를 순서대로 거치면 3개의 홀드를 거치게 되지만, (2, 0), (0, 0) 2개의 홀드만 거치는 것이 최소입니다.
// (0, 2) 홀드와 (2, 2) 홀드로는 갈 수 없습니다.
// 따라서 [[2,0,-1],[0,2,0],[1,0,-1]] 를 return 하면 됩니다.

// 입출력 예 #2

// 다음 그림은 암벽에서 이동할 수 있는 모든 방법을 표시한 것입니다.

// pic3.png

// 그림과 같이 시작 위치부터 순서대로 이동하면, 1개를 거쳐 (1, 0) 홀드, 2개를 거쳐 (1, 3) 홀드, 3개를 거쳐 (0, 4) 홀드, 4개를 거쳐 (0, 5) 홀드, 5개를 거쳐 (1, 5) 홀드로 이동할 수 있습니다.

// 따라서 [[0,0,0,0,3,4],[1,0,0,2,0,5]] 를 return 하면 됩니다.

function solution(wall) {
  var answer = [[]];
  return answer;
}
