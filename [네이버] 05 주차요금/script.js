// 문제 설명
// X 주차장에선 자동차를 주차한 시간에 따라 요금을 받는 비공개 요금제를 시행하고 있습니다. 주차요금은 기본요금 b원에서 시작해 주차한 시간이 a분 지날 때마다 b원씩 상승합니다. 즉, 0 ~ a - 1 분 주차한 경우 b원, a ~ 2 × a - 1 분 주차한 경우 2 × b원, ... 의 요금을 내야 합니다. 단 구체적인 요금 측정 방식은 비공개로, a와 b는 양의 정수라는 것 외에는 알려지지 않았습니다.

// 당신은 자동차를 주차장에 t분 간 주차하려 합니다. 이때 주차 요금을 냈던 기록을 바탕으로 가능한 주차요금의 최솟값과 최댓값을 미리 계산하려 합니다.

// 다음은 아래 표를 바탕으로 t = 27 일 때 필요한 주차요금의 최솟값과 최댓값을 계산하는 예시입니다.

// <주차 요금 기록>

// 주차 시간(분)	요금
// 4	1000
// 6	1000
// 21	3000
// 16	2000
// 26	3000
// a = 10, b = 1000 일 경우 27분 주차했을 때 기본요금 1000원, 이후 10분과 20분에 각각 1000원의 요금이 추가되어 총요금은 3000원입니다.
// a = 9, b = 1000 일 경우 27분 주차했을 때 기본요금 1000원, 이후 9, 18, 27분에 각각 1000원의 요금이 추가되어 총요금은 4000원입니다.
// a, b로 가능한 값은 위 두 가지 경우 중 하나입니다. 따라서 자동차를 27분 주차했을 때 내야 하는 최소 요금은 3000원, 최대 요금은 4000원입니다.

// 주차 시간에 따른 요금 기록이 담긴 2차원 정수 배열 fees와 자동차를 주차하려는 시간을 나타내는 정수 t가 매개변수로 주어집니다. 이때, 자동차를 t분 주차했을 때 내야 하는 최소 요금과 최대 요금을 1차원 정수 배열에 순서대로 담아 return 하도록 solution 함수를 완성해주세요. 단, a, b로 가능한 값이 없을 경우 -1을 배열에 담아 return 합니다.

// 제한사항
// 1 ≤ fees의 길이 ≤ 100,000
// fees의 원소는 [x, y] 형태의 길이가 2인 1차원 정수 배열입니다.
// x는 주차 시간(분), y는 요금을 나타냅니다.
// 1 ≤ x ≤ 1,000,000
// 1 ≤ y ≤ 1,000,000,000
// 1 ≤ t ≤ 1,000,000
// 입출력 예
// fees	t	result
// [[4, 1000], [6, 1000], [21, 3000], [16, 2000], [26, 3000]]	27	[3000, 4000]
// [[3, 40000], [5, 60000]]	2	[30000, 40000]
// [[3, 40000], [5, 60000], [8, 90000]]	2	[30000, 30000]
// [[10, 680], [15, 700], [60, 900]]	60	[-1]
// 입출력 예 설명
// 입출력 예 #1

// 문제 예시와 같습니다.

// 입출력 예 #2

// a, b로 가능한 값은 아래 두 가지 경우입니다.

// a = 1, b = 10000
// a = 2, b = 20000
// 따라서 자동차를 2분 간 주차할 때 필요한 주차요금의 최솟값과 최댓값은 각각 30000, 40000입니다.

// 입출력 예 #3

// a, b로 가능한 값은 a = 1, b = 10000 단 한 가지입니다.

// 따라서 자동차를 2분 간 주차할 때 필요한 주차요금의 최솟값과 최댓값은 각각 30000, 30000입니다.

// 입출력 예 #4

// a, b로 가능한 값이 존재하지 않으므로 [-1]을 return 해야 합니다.

function solution(fees, t) {
  var answer = [];
  return answer;
}
