// 문제 설명
// n x n 정사각형 격자 형태인 마을에 불꽃 토템과 얼음 토템이 생겼습니다.

// 두 토템의 특징은 다음과 같습니다.

// 불꽃 토템

// 불꽃 토템의 영향 범위는 매 분마다 늘어나며, 늘어나는 방식은 다음과 같습니다. 가운데 불꽃 모양이 불꽃 토템입니다. 제목 없는 다이어그램.drawio \(38\).png
// 불꽃 토템의 영향 하에 있는 구역들은 매 분마다 온도가 1도씩 올라갑니다.
// 얼음 토템

// 얼음 토템의 영향 범위는 매 분마다 늘어나며, 늘어나는 방식은 다음과 같습니다. 가운데 얼음 모양이 얼음 토템입니다. 제목 없는 다이어그램.drawio \(37\).png
// 얼음 토템의 영향 하에 있는 구역들은 매 분마다 온도가 1도씩 내려갑니다.
// 한 칸이 여러 토템에 영향을 받을 수 있습니다. 예를 들어, 불꽃 토템 3개와 얼음 토템 1개의 영향 하에 있는 구역은 매 분마다 온도가 2도씩 올라갑니다.

// 0분인 지금, 마을의 모든 칸의 온도는 0도입니다.
// 당신은 마을 각 칸의 m분 후 온도를 알고 싶습니다.

// 정수 n, 정수 m, 불꽃 토템의 위치를 담은 2차원 정수 배열 fires, 얼음 토템의 위치를 담은 2차원 정수 배열 ices가 매개변수로 주어집니다. m분 후 마을 각 칸의 온도를 마을 형태에 맞춰 n x n 크기의 2차원 정수 배열에 담아 return 하도록 solution 함수를 완성해주세요.

// 제한사항
// 1 ≤ n ≤ 30
// 1 ≤ m ≤ 1,000,000,000
// 1 ≤ fires의 길이 ≤ n
// fires의 원소는 [x, y] 형태의 정수 배열이며, 마을의 x행 y열 칸에 불꽃 토템이 있다는 것을 의미합니다.
// 1 ≤ x ≤ n
// 1 ≤ y ≤ n
// 1 ≤ ices의 길이 ≤ n
// ices의 원소는 [x, y] 형태의 정수 배열이며, 마을의 x행 y열 칸에 얼음 토템이 있다는 것을 의미합니다.
// 1 ≤ x ≤ n
// 1 ≤ y ≤ n
// 각 칸에는 최대 1개의 토템이 있습니다.
// 입출력 예
// n	m	fires	ices	result
// 3	2	[[1, 1]]	[[3, 3]]	[[2, 2, 0], [2 ,1, -1], [0, -1, -1]]
// 5	3	[[5, 5], [1, 3], [5, 2]]	[[1, 5], [3, 2]]	[[1, 0, 0, 0, -1], [1, 2, 2, 2, 1], [1, 2, 3, 3, 2], [2, 2, 4, 5, 4], [2, 2, 4, 5, 4]]
// 입출력 예 설명
// 입출력 예 #1

// 마을 형태는 다음과 같습니다.
// 제목 없는 다이어그램.drawio \(24\).png

// 마을 각 칸의 온도 변화는 다음과 같습니다.
// 제목 없는 다이어그램.drawio \(33\).png

// 따라서 [[2, 2, 0], [2 ,1, -1], [0, -1, -1]]을 return 하면 됩니다.

// 입출력 예 #2

// 마을 형태는 다음과 같습니다.
// 얼불토템 그림5.png

// 마을 각 칸의 온도 변화는 다음과 같습니다.
// 제목 없는 다이어그램.drawio \(34\).png

// 따라서 [[1, 0, 0, 0, -1], [1, 2, 2, 2, 1], [1, 2, 3, 3, 2], [2, 2, 4, 5, 4], [2, 2, 4, 5, 4]]를 return 하면 됩니다.

function solution(n, m, fires, ices) {
  var answer = [[]];
  return answer;
}
